name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  Check_Changed_Files:
    name: Check File Changes
    runs-on: "ubuntu-20.04"
    # Declare outputs for next jobs
    outputs:
      infrastructure_changed: ${{ steps.check_files_changed.outputs.infrastructure_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - shell: pwsh
        id: check_files_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          $SourceDiff = $diff | Where-Object { $_ -match '^src/' -or $_ -match '.js$' -or $_ -match '.yml$' }
          $HasDiff = $SourceDiff.Length -gt 0

          Write-Host "::set-output name=infrastructure_changed::$HasDiff"
  Test:
    name: Testing
    needs: [Check_Changed_Files]
    if: needs.Check_Changed_Files.outputs.infrastructure_changed == 'True'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm run setup
      - run: npm run test

  Deploy:
    name: Deploying to ${{ inputs.stage }}
    needs: [Test, Check_Changed_Files]
    if: needs.Check_Changed_Files.outputs.infrastructure_changed == 'True'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm run setup
      - run: npm run test
      - name: Deploy Stage
        uses: serverless/github-action@v3.1
        with:
          args: deploy --stage ${{ inputs.stage }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
